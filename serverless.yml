service: ${self:custom.service}-${self:custom.namespace}

provider:
  name: aws
  runtime: nodejs12.x
  stage: dev
  region: us-east-1
  tracing:
    lambda: true
  environment:
    SLS_NAMESPACE: ${self:custom.namespace}
    SLS_STAGE: ${self:custom.stage}
    DYNAMODB_TABLE_TOKENS: ${self:custom.dynamodbTables.tokens}
  iamRoleStatements:
    - Effect: Allow
      Action:
        - ssm:DescribeParameters
      Resource: "*"
    - Effect: Allow
      Action:
        - ssm:GetParameter
        - ssm:GetParameters
      Resource:
        Fn::Join:
          - ":"
          - - "arn:aws:ssm"
            - Ref: AWS::Region
            - Ref: AWS::AccountId
            - "parameter/${self:custom.stage}/*"
    - Effect: Allow
      Action:
        - dynamodb:DescribeTable
        - dynamodb:Query
        - dynamodb:Scan
        - dynamodb:GetItem
        - dynamodb:PutItem
        - dynamodb:UpdateItem
        - dynamodb:DeleteItem
      Resource:
        - "Fn::GetAtt": [ TokensDynamoDBTable, Arn ]
        - Fn::Join:
            - "/"
            - - "Fn::GetAtt": [ TokensDynamoDBTable, Arn ]
              - "index"
              - "*"

  stackPolicy:
    - Effect: Allow
      Action: "Update:*"
      Principal: "*"
      Resource: "*"
    - Effect: "Deny"
      Action: ["Update:Replace"]
      Principal: "*"
      Resource: "LogicalResourceId/TokensDynamoDBTable"
    - Effect: "Deny"
      Action: ["Update:Delete"]
      Principal: "*"
      Resource: "LogicalResourceId/TokensDynamoDBTable"

functions:
  app:
    handler: index.handler
    timeout: 30
    events:
      - http: GET /patreon/authorize
      - http: POST /patreon/validate
      - http: GET /patreon/api/{proxy+}
      - http: GET /contentful/{proxy+}
      - http: GET /rss/{proxy+}
      - http: POST /contentful-webhook
      - http: GET /discourse/counts/{proxy+}
      - http: GET /patron-pledge
  sync:
    handler: src/sync.handler
    timeout: 300
    events:
      - schedule:
          rate: cron(0 12 * * ? *)   # daily, 8AM EDT
          enabled: ${self:custom.syncEnabled.${self:custom.stage}}

plugins:
  - serverless-offline

custom:
  service: theliturgists-backend
  namespace: ${env:SLS_NAMESPACE, env:USER}
  stage: ${opt:stage, self:provider.stage}
  syncEnabled:
    dev: false
    staging: false
    production: true
  dynamodbTables:
    tokens: "${self:custom.service}-${self:custom.namespace}-${self:custom.stage}-tokens"

resources:
  Resources:
    TokensDynamoDBTable:
      # Table to store user id / Patreon id/token mapping
      Type: AWS::DynamoDB::Table
      Properties:
        TableName: ${self:custom.dynamodbTables.tokens}
        AttributeDefinitions:
          - AttributeName: userId
            AttributeType: S
          - AttributeName: patreonUserId
            AttributeType: S
        KeySchema:
          - AttributeName: userId
            KeyType: HASH
        GlobalSecondaryIndexes:
          - IndexName: patreonUserIdIndex
            KeySchema:
              - AttributeName: patreonUserId
                KeyType: HASH
            Projection:
              ProjectionType: ALL
        BillingMode: PAY_PER_REQUEST
